// generated by ./ddl2cpp /Users/tbastos/Downloads/box.sql /Users/tbastos/Downloads/BoxTable box_db
#ifndef BOX_DB_BOXTABLE_H
#define BOX_DB_BOXTABLE_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace box_db
{
  namespace Box_
  {
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Z
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T z;
            T& operator()() { return z; }
            const T& operator()() const { return z; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Yaw
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "yaw";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T yaw;
            T& operator()() { return yaw; }
            const T& operator()() const { return yaw; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Pitch
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pitch";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pitch;
            T& operator()() { return pitch; }
            const T& operator()() const { return pitch; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Roll
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "roll";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T roll;
            T& operator()() { return roll; }
            const T& operator()() const { return roll; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Red
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "red";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T red;
            T& operator()() { return red; }
            const T& operator()() const { return red; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Green
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "green";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T green;
            T& operator()() { return green; }
            const T& operator()() const { return green; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Blue
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "blue";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T blue;
            T& operator()() { return blue; }
            const T& operator()() const { return blue; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  }

  struct Box: sqlpp::table_t<Box,
               Box_::X,
               Box_::Y,
               Box_::Z,
               Box_::Yaw,
               Box_::Pitch,
               Box_::Roll,
               Box_::Red,
               Box_::Green,
               Box_::Blue>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "box";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T box;
        T& operator()() { return box; }
        const T& operator()() const { return box; }
      };
    };
  };
}
#endif
